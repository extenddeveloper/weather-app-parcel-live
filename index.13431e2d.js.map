{"mappings":"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","sources":["storage.js","data-store.js","ui.js","main.js"],"sourcesContent":["const storage = {\r\n    privateCity: '',\r\n    privateCountry: '',\r\n    set city(name){\r\n        this.privateCity = name;\r\n    },\r\n    set country(name){\r\n        this.privateCountry = name;\r\n    },\r\n    saveItem(){\r\n        let dataObj = {\r\n            city: this.privateCity,\r\n            country: this.privateCountry\r\n        }\r\n        localStorage.setItem('bd-weather-city', JSON.stringify(dataObj));\r\n       let weatherInfo = JSON.parse(localStorage.getItem('bd-weather-city'));\r\n       console.log(weatherInfo.country);\r\n       console.log(weatherInfo.city);\r\n    }\r\n};\r\n\r\nexport default storage;\r\n","const weatherDataStore = {\r\n    privateCity: '',\r\n    privateCountry: '',\r\n    api: '48c7994cf0f143a27cbae7caf6ebaa78',\r\n    set city(name){\r\n        this.privateCity = name;\r\n    },\r\n    set country(name){\r\n        this.privateCountry = name;\r\n    },\r\n    async fetchWeatherData(){\r\n        try{\r\n            const res = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${this.privateCity},${this.privateCountry}&unit=metric&appid=${this.api}`)\r\n            return await res.json();\r\n        }catch(err){\r\n            UI.showMessage(err.message)\r\n        }\r\n    }\r\n};\r\n\r\nexport default weatherDataStore;","\r\nimport storage from './storage.js';\r\nimport weatherDataStore from './data-store.js';\r\n\r\nconst UI = {\r\n    city: '',\r\n    country: '',\r\n    loadSelectors(){\r\n        const cityElm = document.querySelector('#city')\r\n        const cityInfoElm = document.querySelector('#w-city')\r\n        const iconElm = document.querySelector('#w-icon')\r\n        const temperatureElm = document.querySelector('#w-temp')\r\n        const pressureElm = document.querySelector('#w-pressure')\r\n        const humidityElm = document.querySelector('#w-humidity')\r\n        const feelElm = document.querySelector('#w-feel')\r\n        const formElm = document.querySelector('#form')\r\n        const countryElm = document.querySelector('#country')\r\n        const messageElm = document.querySelector('#messageWrapper')\r\n\r\n        return {\r\n            cityElm,\r\n            cityInfoElm,\r\n            iconElm,\r\n            temperatureElm,\r\n            pressureElm,\r\n            humidityElm,\r\n            feelElm,\r\n            formElm,\r\n            countryElm,\r\n            messageElm\r\n        }\r\n    },\r\n\r\n    getInputValue(){\r\n        const {cityElm, countryElm} = this.loadSelectors();\r\n        let city = cityElm.value;\r\n        let country = countryElm.value;\r\n        return {\r\n            city,\r\n            country\r\n        }\r\n    },\r\n\r\n    validateInput(city, country){\r\n        let isError = false;\r\n        if(city === '' || country === ''){\r\n            isError = true;\r\n        }\r\n        return isError;\r\n    },\r\n    hideMessage(){\r\n        const msgContentElm = document.querySelector('.err-msg');\r\n        if(msgContentElm){\r\n            setTimeout(()=> {\r\n                msgContentElm.remove();\r\n            }, 2000);\r\n        }\r\n    },\r\n    showMessage(msg){\r\n        let { messageElm } = this.loadSelectors();\r\n        const msgContentElm = document.querySelector('.err-msg');\r\n        const elm = `<div class=\"alert alert-danger err-msg\">${msg}</div>`;\r\n        if(!msgContentElm){\r\n            messageElm.insertAdjacentHTML('afterbegin', elm);\r\n        }\r\n        this.hideMessage();\r\n    },\r\n    resetInput(){\r\n        const {cityElm, countryElm} = this.loadSelectors();\r\n        countryElm.value = '';\r\n        cityElm.value = '';\r\n    },\r\n    getIconSrc(iconCode) {\r\n        return 'https://openweathermap.org/img/w/' + iconCode + '.png'\r\n    },\r\n    printWeather(data){\r\n        const {\r\n            cityInfoElm,\r\n            iconElm,\r\n            temperatureElm,\r\n            pressureElm,\r\n            humidityElm,\r\n            feelElm\r\n\r\n        } = this.loadSelectors();\r\n        cityInfoElm.textContent = data.name;\r\n        temperatureElm.textContent = `Temperature: ${data.main.temp}Â°C`;\r\n        pressureElm.textContent = `Pressure: ${data.main.pressure} kpa`;\r\n        humidityElm.textContent = `Humadity: ${data.main.humidity} kpa`;\r\n        feelElm.textContent = data.weather[0].description;\r\n        const src = this.getIconSrc(data.weather[0].icon);\r\n        iconElm.setAttribute('src', src);\r\n    },\r\n    init(){\r\n        const {formElm} = this.loadSelectors();\r\n        formElm.addEventListener('submit', async(e) => {\r\n            e.preventDefault();\r\n            // get input value;\r\n            const {city, country} = this.getInputValue();\r\n            //validate input value;\r\n            const isError = this.validateInput(city, country);\r\n            if(isError){\r\n                this.showMessage('Please Input valid Info');\r\n                return;\r\n            }\r\n            this.city = city;\r\n            this.country = country;\r\n\r\n            // set data to weather data storage\r\n            weatherDataStore.city = city;\r\n            weatherDataStore.country = country;\r\n\r\n            // set data to localStorage\r\n            storage.city = city;\r\n            storage.country = country;\r\n            storage.saveItem();\r\n\r\n            const data = await weatherDataStore.fetchWeatherData();\r\n            if(Number(data.cod) >= 400){\r\n                this.showMessage(data.message);\r\n            }else{\r\n                this.printWeather(data);\r\n            }\r\n            this.resetInput();\r\n\r\n        });\r\n\r\n        document.addEventListener('DOMContentLoaded', async(e) => {\r\n            //set data to local Storage;\r\n            if(localStorage.getItem('bd-weather-city')){\r\n                let weatherInfo = JSON.parse(localStorage.getItem('bd-weather-city'));\r\n                weatherDataStore.city = weatherInfo.city;\r\n                weatherDataStore.country = weatherInfo.country;\r\n            }else{\r\n                weatherDataStore.country = \"BD\"\r\n                weatherDataStore.city = 'Dhaka'\r\n            }\r\n            // send request to weather api\r\n            let data = await weatherDataStore.fetchWeatherData();\r\n\r\n            // show data to UI\r\n            this.printWeather(data);\r\n             \r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport default UI;","import UI from './ui.js';\r\n\r\nUI.init();\r\n\r\n\r\n\r\n"],"names":["$eaf3c7fa323d1109$export$2e2bcd8739ae039","privateCity","privateCountry","city","name","this","country","saveItem","dataObj","localStorage","setItem","JSON","stringify","weatherInfo","parse","getItem","console","log","$8549015cb9665d3d$export$2e2bcd8739ae039","api","async","res","fetch","json","err","UI","showMessage","message","loadSelectors","cityElm","document","querySelector","cityInfoElm","iconElm","temperatureElm","pressureElm","humidityElm","feelElm","formElm","countryElm","messageElm","getInputValue","value","validateInput","isError","hideMessage","msgContentElm","setTimeout","remove","msg","elm","insertAdjacentHTML","resetInput","getIconSrc","iconCode","printWeather","data","textContent","main","temp","pressure","humidity","weather","description","src","icon","setAttribute","init","addEventListener","e","preventDefault","fetchWeatherData","Number","cod"],"version":3,"file":"index.13431e2d.js.map"}